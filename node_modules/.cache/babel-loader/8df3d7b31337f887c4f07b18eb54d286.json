{"ast":null,"code":"var _jsxFileName = \"/home/nabanit/react/mapbox/src/Mapbox.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReactMapGl, { Marker, Popup } from 'react-map-gl';\nimport * as Data from './data.json';\nimport './Mapbox.css';\n\nfunction Mapbox() {\n  const [viewPort, setviewPort] = useState({\n    latitude: 45.4211,\n    longitude: -75.6903,\n    width: \"100vw\",\n    height: \"100vh\",\n    zoom: 10\n  });\n  const [selectedPark, setSelectedPark] = useState(null);\n  useEffect(() => {\n    const listner = e => {\n      if (e.key === \"Escape\") {\n        setSelectedPark(null);\n      }\n    };\n\n    window.addEventListener(\"keydown\", listner);\n  }, []);\n  return () => {\n    window.removeEventListener(\"keydown\", listner);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ReactMapGl, Object.assign({}, viewPort, {\n    mapboxApiAccessToken: process.env.REACT_APP_MAP_ACCESS_TOKEN,\n    onViewportChange: viewPort => {\n      setviewPort(viewPort);\n    },\n    mapStyle: \"mapbox://styles/nabanit/cka7uauty1vpl1ip2f33744yz\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }), Data.features.map(park => /*#__PURE__*/React.createElement(Marker, {\n    key: park.properties.PARK_ID,\n    latitude: park.geometry.coordinates[1],\n    longitude: park.geometry.coordinates[0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"marker-btn\",\n    onMouseOver: e => {\n      e.preventDefault();\n      setSelectedPark(park);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/mapmarker.png\",\n    alt: \"park\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 29\n    }\n  })))), selectedPark ? /*#__PURE__*/React.createElement(Popup, {\n    latitude: selectedPark.geometry.coordinates[1],\n    longitude: selectedPark.geometry.coordinates[0],\n    onClose: () => setSelectedPark(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 29\n    }\n  }, selectedPark.properties.NAME), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 29\n    }\n  }, \"latitude=\", selectedPark.geometry.coordinates[1], \",longitude=\", selectedPark.geometry.coordinates[0]))) : null));\n}\n\nexport default Mapbox;","map":{"version":3,"sources":["/home/nabanit/react/mapbox/src/Mapbox.js"],"names":["React","useState","useEffect","ReactMapGl","Marker","Popup","Data","Mapbox","viewPort","setviewPort","latitude","longitude","width","height","zoom","selectedPark","setSelectedPark","listner","e","key","window","addEventListener","removeEventListener","process","env","REACT_APP_MAP_ACCESS_TOKEN","features","map","park","properties","PARK_ID","geometry","coordinates","preventDefault","NAME"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactMapGl, { Marker, Popup } from 'react-map-gl';\nimport * as Data from './data.json';\nimport './Mapbox.css';\n\n\n\n\n\n\nfunction Mapbox() {\n    const [viewPort, setviewPort] = useState({\n        latitude: 45.4211,\n        longitude: -75.6903,\n        width: \"100vw\",\n        height: \"100vh\",\n        zoom: 10,\n    });\n\n    const [selectedPark, setSelectedPark] = useState(null);\n    useEffect(() => {\n        const listner = e => {\n            if (e.key === \"Escape\") {\n                setSelectedPark(null);\n            }\n        }\n        window.addEventListener(\"keydown\", listner);\n\n    }, [])\n    return () => {\n        window.removeEventListener(\"keydown\", listner);\n    }\n\n\n\n    return (\n        <div>\n            <ReactMapGl {...viewPort} mapboxApiAccessToken={process.env.REACT_APP_MAP_ACCESS_TOKEN}\n                onViewportChange={(viewPort) => { setviewPort(viewPort) }} mapStyle=\"mapbox://styles/nabanit/cka7uauty1vpl1ip2f33744yz\">\n                {Data.features.map((park) => (\n                    <Marker key={park.properties.PARK_ID} latitude={park.geometry.coordinates[1]} longitude={park.geometry.coordinates[0]}>\n                        <button className=\"marker-btn\" onMouseOver={e => {\n                            e.preventDefault();\n                            setSelectedPark(park);\n                        }}>\n                            <img src=\"/mapmarker.png\" alt=\"park\" />\n                        </button>\n\n                    </Marker>\n                ))}\n                {selectedPark ? (\n                    <Popup latitude={selectedPark.geometry.coordinates[1]} longitude={selectedPark.geometry.coordinates[0]}\n                        onClose={() => (setSelectedPark(null))}>\n                        <div>\n                            <p>{selectedPark.properties.NAME}</p>\n                            <p>latitude={selectedPark.geometry.coordinates[1]},longitude={selectedPark.geometry.coordinates[0]}</p>\n\n                        </div>\n                    </Popup>\n                ) : null}\n            </ReactMapGl >\n        </div >\n    )\n\n}\n\nexport default Mapbox;"]},"metadata":{},"sourceType":"module"}